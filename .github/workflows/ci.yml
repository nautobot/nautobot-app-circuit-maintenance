---
name: "CI"
concurrency:  # Cancel any existing runs of this workflow for this same PR
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true
on:  # yamllint disable
  push:
    branches:
      - "main"
      - "develop"
    tags:
      - "v*"
  pull_request: ~

jobs:
  black:
    runs-on: "ubuntu-20.04"
    env:
      INVOKE_NAUTOBOT_CIRCUIT_MAINTENANCE_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v5"
      - name: "Linting: black"
        run: "poetry run invoke black"
  bandit:
    runs-on: "ubuntu-20.04"
    env:
      INVOKE_NAUTOBOT_CIRCUIT_MAINTENANCE_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v5"
      - name: "Linting: bandit"
        run: "poetry run invoke bandit"
    needs:
      - "black"
  pydocstyle:
    runs-on: "ubuntu-20.04"
    env:
      INVOKE_NAUTOBOT_CIRCUIT_MAINTENANCE_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v5"
      - name: "Linting: pydocstyle"
        run: "poetry run invoke pydocstyle"
    needs:
      - "black"
  flake8:
    runs-on: "ubuntu-20.04"
    env:
      INVOKE_NAUTOBOT_CIRCUIT_MAINTENANCE_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v5"
      - name: "Linting: flake8"
        run: "poetry run invoke flake8"
    needs:
      - "black"
  yamllint:
    runs-on: "ubuntu-20.04"
    env:
      INVOKE_NAUTOBOT_CIRCUIT_MAINTENANCE_LOCAL: "True"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v5"
      - name: "Linting: yamllint"
        run: "poetry run invoke yamllint"
    needs:
      - "black"
  build:
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v5"
      - name: "Copy credentials"
        run: "cp development/creds.example.env development/creds.env"
      - name: "Build Container"
        run: "poetry run invoke build"
    needs:
      - "bandit"
      - "pydocstyle"
      - "flake8"
      # - "yamllint"
  pylint:
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v5"
      - name: "Copy credentials"
        run: "cp development/creds.example.env development/creds.env"
      - name: "Build Container"
        run: "poetry run invoke build"
      - name: "Linting: Pylint"
        run: "poetry run invoke pylint"
    needs:
      - "build"
  unittest-postgres:
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.7", "3.8", "3.9"]
        # TODO: to be updated to "latest"
        nautobot-version: ["1.3.8"]
        db-backend: ["postegresql"]
        include:
          - python-version: "3.9"
            db-backend: "postgresql"
            # TODO: to be updated to 1.4.0
            nautobot-version: "1.3.8"
    runs-on: "ubuntu-20.04"
    env:
      INVOKE_NAUTOBOT_CIRCUIT_MAINTENANCE_PYTHON_VER: "${{ matrix.python-version }}"
      INVOKE_NAUTOBOT_CIRCUIT_MAINTENANCE_NAUTOBOT_VER: "${{ matrix.nautobot-version }}"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v5"
      - name: "Copy credentials"
        run: "cp development/creds.example.env development/creds.env"
      - name: "Build Container"
        run: "poetry run invoke build"
      - name: "Run Tests"
        run: "poetry run invoke unittest --failfast"
    needs:
      - "pylint"
  unittest-mysql:
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.7", "3.8", "3.9"]
        # TODO: to be updated to "latest"
        nautobot-version: ["1.3.8"]
        include:
          - python-version: "3.9"
            # TODO: to be updated to "1.4.0"
            nautobot-version: "1.3.8"
    runs-on: "ubuntu-20.04"
    env:
      INVOKE_NAUTOBOT_CIRCUIT_MAINTENANCE_PYTHON_VER: "${{ matrix.python-version }}"
      INVOKE_NAUTOBOT_CIRCUIT_MAINTENANCE_NAUTOBOT_VER: "${{ matrix.nautobot-version }}"
      INVOKE_NAUTOBOT_CIRCUIT_MAINTENANCE_NAUTOBOT_DB_ENGINE: "django.db.backends.mysql"
      INVOKE_NAUTOBOT_CIRCUIT_MAINTENANCE_NAUTOBOT_DB_PORT: "3306"
      INVOKE_NAUTOBOT_CIRCUIT_MAINTENANCE_NAUTOBOT_DB_USER: "root"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Setup environment"
        uses: "networktocode/gh-action-setup-poetry-environment@v5"
      - name: "Copy credentials"
        run: "cp development/creds.example.env development/creds.env"
      - name: "Build Container"
        run: "poetry run invoke build"
      - name: "Run Tests"
        run: "poetry run invoke unittest --failfast"
    needs:
      - "pylint"
  publish_gh:
    name: "Publish to GitHub"
    runs-on: "ubuntu-20.04"
    if: "startsWith(github.ref, 'refs/tags/v')"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Set up Python"
        uses: "actions/setup-python@v2"
        with:
          python-version: "3.9"
      - name: "Install Python Packages"
        run: "pip install poetry"
      - name: "Set env"
        run: "echo RELEASE_VERSION=${GITHUB_REF:10} >> $GITHUB_ENV"
      - name: "Run Poetry Version"
        run: "poetry version $RELEASE_VERSION"
      - name: "Run Poetry Build"
        run: "poetry build"
      - name: "Upload binaries to release"
        uses: "svenstaro/upload-release-action@v2"
        with:
          repo_token: "${{ secrets.GH_NAUTOBOT_BOT_TOKEN }}"
          file: "dist/*"
          tag: "${{ github.ref }}"
          overwrite: true
          file_glob: true
    needs:
      - "unittest-postgres"
      - "unittest-mysql"
  publish_pypi:
    name: "Push Package to PyPI"
    runs-on: "ubuntu-20.04"
    if: "startsWith(github.ref, 'refs/tags/v')"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Set up Python"
        uses: "actions/setup-python@v2"
        with:
          python-version: "3.9"
      - name: "Install Python Packages"
        run: "pip install poetry"
      - name: "Set env"
        run: "echo RELEASE_VERSION=${GITHUB_REF:10} >> $GITHUB_ENV"
      - name: "Run Poetry Version"
        run: "poetry version $RELEASE_VERSION"
      - name: "Run Poetry Build"
        run: "poetry build"
      - name: "Push to PyPI"
        uses: "pypa/gh-action-pypi-publish@release/v1"
        with:
          user: "__token__"
          password: "${{ secrets.PYPI_API_TOKEN }}"
    needs:
      - "unittest-postgres"
      - "unittest-mysql"
  slack-notify:
    needs:
      - "publish_gh"
      - "publish_pypi"
    runs-on: "ubuntu-20.04"
    env:
      SLACK_WEBHOOK_URL: "${{ '{{ secrets.SLACK_WEBHOOK_URL }}' }}"
      SLACK_MESSAGE: >-
        *NOTIFICATION: NEW-RELEASE-PUBLISHED*\n
        Repository: <${{ github.server_url }}/${{ github.repository }}|${{ github.repository }}>\n
        Release: <${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ github.ref_name }}|${{ github.ref_name }}>\n
        Published by: <${{ github.server_url }}/${{ github.actor }}|${{ github.actor }}>
    steps:
      - name: "Send a notification to Slack"
        # ENVs cannot be used directly in job.if. This is a workaround to check
        # if SLACK_WEBHOOK_URL is present.
        if: "${{ env.SLACK_WEBHOOK_URL != '' }}"
        uses: "slackapi/slack-github-action@v1.17.0"
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ env.SLACK_MESSAGE }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: "${{ secrets.SLACK_WEBHOOK_URL }}"
          SLACK_WEBHOOK_TYPE: "INCOMING_WEBHOOK"
